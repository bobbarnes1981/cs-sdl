#region License
/*
 * Copyright (C) 2001-2005 Wouter van Oortmerssen.
 * 
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must not
 * claim that you wrote the original software. If you use this software
 * in a product, an acknowledgment in the product documentation would be
 * appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 * misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 * 
 * additional clause specific to Cube:
 * 
 * 4. Source versions may not be "relicensed" under a different license
 * without my explicitly written permission.
 *
 */

/* 
 * All code Copyright (C) 2006 David Y. Hudson
 */
#endregion License

using System;
using System.IO;
using Tao.Sdl;
using Tao.OpenGl;
using SdlDotNet;
using System.Runtime.InteropServices;


namespace TessLib
{
	public enum BlockTypes                         // block types, order matters!
	{
		SOLID = 0,                  // entirely solid cube [only specifies wtex]
		CORNER,                     // half full corner of a wall
		FHF,                        // floor heightfield using neighbour vdelta values
		CHF,                        // idem ceiling
		SPACE,                      // entirely empty cube
		SEMISOLID,                  // generated by mipmapping
		MAXTYPE
	}

	public enum TextureNumbers
	{
		DEFAULT_SKY = 0,
		DEFAULT_LIQUID,
		DEFAULT_WALL,
		DEFAULT_FLOOR,
		DEFAULT_CEIL
	}

	public enum StaticEntity                       // static entity types
	{
		NOTUSED = 0,                // entity slot not in use in map
		LIGHT,                      // lightsource, attr1 = radius, attr2 = intensity
		PLAYERSTART,                // attr1 = angle
		I_SHELLS, 
		I_BULLETS, 
		I_ROCKETS, 
		I_ROUNDS,
		I_HEALTH, 
		I_BOOST,
		I_GREENARMOUR, 
		I_YELLOWARMOUR,
		I_QUAD,
		TELEPORT,                   // attr1 = idx
		TELEDEST,                   // attr1 = angle, attr2 = idx
		MAPMODEL,                   // attr1 = angle, attr2 = idx
		MONSTER,                    // attr1 = angle, attr2 = monstertype
		CARROT,                     // attr1 = tag, attr2 = type
		JUMPPAD,                    // attr1 = zpush, attr2 = ypush, attr3 = xpush
		MAXENTTYPES
	}

	public enum Gun
	{ 
		GUN_FIST = 0, 
		GUN_SG, 
		GUN_CG, 
		GUN_RL, 
		GUN_RIFLE, 
		GUN_FIREBALL, 
		GUN_ICEBALL, 
		GUN_SLIMEBALL, 
		GUN_BITE, 
		NUMGUNS };


	public enum CSStatus
	{ 
		CS_ALIVE = 0, 
		CS_DEAD, 
		CS_LAGGED, 
		CS_EDITING
	}

	// hardcoded sounds, defined in sounds.cfg
	public enum Sounds
	{
		S_JUMP = 0, 
		S_LAND, 
		S_RIFLE, 
		S_PUNCH1, 
		S_SG, 
		S_CG,
		S_RLFIRE, 
		S_RLHIT, 
		S_WEAPLOAD, 
		S_ITEMAMMO, 
		S_ITEMHEALTH,
		S_ITEMARMOUR, 
		S_ITEMPUP, 
		S_ITEMSPAWN, 
		S_TELEPORT, 
		S_NOAMMO, 
		S_PUPOUT,
		S_PAIN1, 
		S_PAIN2, 
		S_PAIN3, 
		S_PAIN4, 
		S_PAIN5, 
		S_PAIN6,
		S_DIE1, 
		S_DIE2,
		S_FLAUNCH, 
		S_FEXPLODE,
		S_SPLASH1, 
		S_SPLASH2,
		S_GRUNT1, 
		S_GRUNT2, 
		S_RUMBLE,
		S_PAINO,
		S_PAINR, 
		S_DEATHR, 
		S_PAINE, 
		S_DEATHE, 
		S_PAINS, 
		S_DEATHS,
		S_PAINB, 
		S_DEATHB, 
		S_PAINP, 
		S_PIGGR2, 
		S_PAINH, 
		S_DEATHH,
		S_PAIND, 
		S_DEATHD,
		S_PIGR1, 
		S_ICEBALL, 
		S_SLIMEBALL,
		S_JUMPPAD,
	}

	// armour types... take 20/40/60 % off
	public enum ArmorTypes
	{ 
		A_BLUE, 
		A_GREEN, 
		A_YELLOW 
	}; 
    
	public enum MonsterStates
	{ 
		M_NONE = 0, 
		M_SEARCH, 
		M_HOME, 
		M_ATTACKING, 
		M_PAIN, 
		M_SLEEP, 
		M_AIMING 
	}  // monster states


	public enum Weapon
	{ 
		GUN_FIST = 0, 
		GUN_SG, 
		GUN_CG, 
		GUN_RL, 
		GUN_RIFLE, 
		GUN_FIREBALL, 
		GUN_ICEBALL, 
		GUN_SLIMEBALL, 
		GUN_BITE, 
		NUMGUNS 
	}

	/// <summary>
	/// function signatures for script functions, see command.cpp
	/// </summary>
	public enum FunctionSignatures
	{
		ARG_1INT, ARG_2INT, ARG_3INT, ARG_4INT,
		ARG_NONE,
		ARG_1STR, ARG_2STR, ARG_3STR, ARG_5STR,
		ARG_DOWN, ARG_DWN1,
		ARG_1EXP, ARG_2EXP,
		ARG_1EST, ARG_2EST,
		ARG_VARI
	}

	public enum NetworkMessages
	{
		SV_INITS2C, 
		SV_INITC2S, 
		SV_POS, 
		SV_TEXT, 
		SV_SOUND, 
		SV_CDIS,
		SV_DIED, 
		SV_DAMAGE, 
		SV_SHOT, 
		SV_FRAGS,
		SV_TIMEUP, 
		SV_EDITENT, 
		SV_MAPRELOAD, 
		SV_ITEMACC,
		SV_MAPCHANGE, 
		SV_ITEMSPAWN, 
		SV_ITEMPICKUP, 
		SV_DENIED,
		SV_PING, 
		SV_PONG, 
		SV_CLIENTPING, 
		SV_GAMEMODE,
		SV_EDITH, 
		SV_EDITT, 
		SV_EDITS, 
		SV_EDITD, 
		SV_EDITE,
		SV_SENDMAP, 
		SV_RECVMAP, 
		SV_SERVMSG, 
		SV_ITEMLIST,
		SV_EXT
	}   
}
