AC_INIT(src/AssemblyInfo.cs)
AC_PREREQ(2.53)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE([SdldotNet],[2.0.0],[tao-list@lists.ximian.com])

AM_MAINTAINER_MODE

dnl AC_PROG_INTLTOOL([0.25])

AC_PROG_INSTALL

MONO_REQUIRED_VERSION=1.1

AC_MSG_CHECKING([whether we're compiling from CVS])
if test -f "$srcdir/.cvs_version" ; then
        from_cvs=yes
else
  if test -f "$srcdir/.svn" ; then
        from_cvs=yes
  else
        from_cvs=no
  fi
fi

AC_MSG_RESULT($from_cvs)

AC_PATH_PROG(MONO, mono)
AC_PATH_PROG(GMCS, gmcs)
AC_PATH_PROG(GACUTIL, gacutil)

AC_MSG_CHECKING([for mono])
dnl if test "x$MONO" = "x" ; then
dnl  AC_MSG_ERROR([Can't find "mono" in your PATH])
dnl else
  AC_MSG_RESULT([found])
dnl fi

AC_MSG_CHECKING([for gmcs])
dnl if test "x$GMCS" = "x" ; then
dnl  AC_MSG_ERROR([Can't find "gmcs" in your PATH])
dnl else
  AC_MSG_RESULT([found])
dnl fi

AC_MSG_CHECKING([for gacutil])
if test "x$GACUTIL" = "x" ; then
  AC_MSG_ERROR([Can't find "gacutil" in your PATH])
else
  AC_MSG_RESULT([found])
fi

AC_SUBST(PATH)
AC_SUBST(LD_LIBRARY_PATH)

dnl CSFLAGS="-debug -nowarn:1574"
CSFLAGS=""
AC_SUBST(CSFLAGS)

AC_MSG_CHECKING(--disable-cg argument)
AC_ARG_ENABLE(cg,
    [  --disable-cg         Disable Cg interface.],
    [disable_cg=$disableval],
    [disable_cg="no"])
AC_MSG_RESULT($disable_cg)
if test "$disable_cscope" = "yes"; then
  AC_DEFINE(FEAT_CG)
fi

AC_MSG_CHECKING(--disable-platform-windows argument)
AC_ARG_ENABLE(platform-windows,
    [  --disable-platform-windows         Disable Platform.Windows interface.],
    [disable_platform_windows=$disableval],
    [disable_platform_windows="no"])
AC_MSG_RESULT($disable_platform_windows)
if test "$disable_platform_windows" = "yes"; then
  AC_DEFINE(FEAT_PLATFORM_WINDOWS)
fi

AC_MSG_CHECKING(--disable-glfw argument)
AC_ARG_ENABLE(glfw,
    [  --disable-glfw         Disable Glfw interface.],
    [disable_glfw=$disableval],
    [disable_glfw="no"])
AC_MSG_RESULT($disable_glfw)
if test "$disable_glfw" = "yes"; then
  AC_DEFINE(FEAT_GLFW)
fi

AC_MSG_CHECKING(--disable-sdl argument)
AC_ARG_ENABLE(sdl,
    [  --disable-sdl         Disable Sdl interface.],
    [disable_sdl=$disableval],
    [disable_sdl="no"])
AC_MSG_RESULT($disable_sdl)
if test "$disable_sdl" = "yes"; then
  AC_DEFINE(FEAT_SDL)
fi

AC_MSG_CHECKING(--disable-ode argument)
AC_ARG_ENABLE(ode,
    [  --disable-ode         Disable Ode interface.],
    [disable_ode=$disableval],
    [disable_ode="no"])
AC_MSG_RESULT($disable_ode)
if test "$disable_ode" = "yes"; then
  AC_DEFINE(FEAT_ODE)
fi

AC_MSG_CHECKING(--disable-physfs argument)
AC_ARG_ENABLE(physfs,
    [  --disable-physfs         Disable physfs interface.],
    [disable_physfs=$disableval],
    [disable_physfs="no"])
AC_MSG_RESULT($disable_physfs)
if test "$disable_physfs" = "yes"; then
  AC_DEFINE(FEAT_PHYSFS)
fi

dnl Find pkg-config
AC_PATH_PROG(PKGCONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
        AC_MSG_ERROR([You need to install pkg-config])
fi

PKG_CHECK_MODULES(MONO_DEPENDENCY, mono >= $MONO_REQUIRED_VERSION, has_mono=true, has_mono=false)

if test "x$has_mono" = "xtrue"; then
  AC_PATH_PROG(RUNTIME, mono, no)
  AC_PATH_PROG(CSC, gmcs, no)
  if test `uname -s` = "Darwin"; then
        LIB_PREFIX=
        LIB_SUFFIX=.dylib
  else
        LIB_PREFIX=.so
        LIB_SUFFIX=
  fi
else
  AC_PATH_PROG(CSC, csc.exe, no)
  if test x$CSC = "xno"; then
        AC_MSG_ERROR([You need to install either mono or .Net])
  else
    RUNTIME=
    LIB_PREFIX=
    LIB_SUFFIX=.dylib
  fi
fi

AC_SUBST(LIB_PREFIX)
AC_SUBST(LIB_SUFFIX)

AC_SUBST(BASE_DEPENDENCIES_CFLAGS)
AC_SUBST(BASE_DEPENDENCIES_LIBS)

dnl Find monodoc
MONODOC_REQUIRED_VERSION=1.0
AC_SUBST(MONODOC_REQUIRED_VERSION)
PKG_CHECK_MODULES(MONODOC_DEPENDENCY, monodoc >= $MONODOC_REQUIRED_VERSION, enable_monodoc=yes, enable_monodoc=no)

if test "x$enable_monodoc" = "xyes"; then
        AC_PATH_PROG(MONODOC, monodoc, no)
        if test x$MONODOC = xno; then
           enable_monodoc=no
        fi
else
        MONODOC=
fi

AC_SUBST(MONODOC)
AM_CONDITIONAL(ENABLE_MONODOC, test "x$enable_monodoc" = "xyes")

AC_PATH_PROG(GACUTIL, gacutil, no)
if test "x$GACUTIL" = "xno" ; then
        AC_MSG_ERROR([No gacutil tool found])
fi

GACUTIL_FLAGS='/package Tao /gacdir $(DESTDIR)$(prefix)/lib'
AC_SUBST(GACUTIL_FLAGS)

winbuild=no
case "$host" in
       *-*-mingw*|*-*-cygwin*)
               winbuild=yes
               ;;
esac
AM_CONDITIONAL(WINBUILD, test x$winbuild = xyes)

dnl Check for SDL

AC_PATH_PROG([SDL_CONFIG], [sdl-config])
have_sdl=no
if test -n "${SDL_CONFIG}"; then
    have_sdl=yes
    SDL_CFLAGS=`$SDL_CONFIG --cflags`
    SDL_LIBS=`$SDL_CONFIG --libs`
    #
    # sdl-config sometimes emits an rpath flag pointing at its library
    # installation directory.  We don't want this, as it prevents users from
    # linking sdl-viewer against, for example, a locally compiled libGL when a
    # version of the library also exists in SDL's library installation
    # directory, typically /usr/lib.
    #
    SDL_LIBS=`echo $SDL_LIBS | sed 's/-Wl,-rpath,[[^ ]]* //'`
fi
AC_SUBST([SDL_CFLAGS])
AC_SUBST([SDL_LIBS])


AC_OUTPUT([
sdldotnet.pc
Makefile
src/Makefile
examples/Makefile
examples/AudioExample/Makefile
examples/BombRun/Makefile
examples/BounceSprites/Makefile
examples/CDPlayer/Makefile
examples/Gears/Makefile
examples/GuiExample/Makefile
examples/MoviePlayer/Makefile
examples/NeHe/Makefile
examples/OpenGlFont/Makefile
examples/ParticlesExample/Makefile
examples/PhysFsTest/Makefile
examples/Rectangles/Makefile
examples/RedBook/Makefile
examples/SimpleGame/Makefile
examples/SnowDemo/Makefile
examples/SpriteGuiDemos/Makefile
examples/Triad/Makefile
examples/Isotope/Makefile
extras/Makefile
extras/OpenGl/Makefile
extras/Particles/Makefile
tests/Makefile
])

#po/Makefile.in

echo "---"
echo "Configuration summary"
echo ""
echo "   * Installation prefix: $prefix"
echo "   * compiler: $CSC"
echo "   * Documentation: $enable_monodoc ($MONODOC)"
echo ""
echo "---"

