Project Name: SDL.NET
Project Description: SDL.NET is a set of object-oriented .NET bindings for the SDL gaming library (http://libsdl.org) - a cross-platform multimedia library designed to provide level access to audio, keyboard, mouse, joystick, 3D hardware via OpenGL, and 2D video framebuffer.

Home Page: http://cs-sdl.sourceforge.net
Current maintainer: David Hudson (jendave@yahoo.com)

Assembly:
	Name: SdlDotNet.dll
	Namespace: SdlDotNet
	Notes:
		There is one assembly. Supporting separate assemblies was too much trouble. 
		Tao.Sdl (http://taoframework.com, or http:/cs-sdl.sourceforge.net) contains 
		the low-level bindings to the six C lbraries (SDL, SDL_image, SDL_ttf, SDL_mixer, SDL_gfx, smpeg)

Zip file contains:
	/* - info files, Strong name keys, build/solution files.
	/bin - Assemblies
	/doc - HTML, CHM and tutorial docs.
	/lib - library dependencies. Please put these libs in your path.
	/examples - demo apps for the library
	/src - source
	/scripts - build scripts
	/tools - utils
	/tests - unit tests
	
		
Development Environment:
	Runtimes/Compilers:
		.NET SDK 1.1 SP1 for now.
		Mono on Windows
		Future:
		Mono on Linux
		Mono on MacOSX
		
	IDEs:
		Visual Studio 2003
		SharpDevelop
		VIM
		Use dnpb for creating VS and SharpDevelop project files
		
	Tools:
		NAnt 0.85 RC3
		Nunit 2.2.0
		dnpb 1.1.0
		
		Notes: NAnt will be the primary way to create release builds.
		Using Nunit with GUI oriented programs is problematic, 
		but I hope to use it as much as possible to reduce the ad hoc tests 
		I do on the code.

	Dependencies (make sure these are in your path):
		C libraries
		SDL 1.2.8
		SDL_image 1.2.4
		SDL_mixer 1.2.5
		SDL_ttf 2.0.7
		SPMEG 0.4.4
		SDL_gfx 2.0.13
		
		.NET libraries
		Tao.Sdl

		Notes: Randy Ridge of the Tao project and I worked on the native C 
		bindings for the SDL libraries and Randy
		added them to Tao. This gives the bindings and broader user base so
		additional work can be done on the bindings.
		SDL.NET will focus on the higher-level features.

Approach:
	I plan to model the API somewhat after pygame. Since pygame is a successful object-oriented wrapper around SDL, 
	it makes sense to look to pygame for inspiration. Obviously there will be areas 
	where they will differ. 
	There is also a Java-based set of bindings (SDLjava).  
	Since Java and C# are so closely 
	related, it is worth a look.

Coding Style
	Follow .NET naming conventions. **DONE**
	CLS compliance **Done**

Tutorials
	Two tutorials have finally been added. Check out the /docs/tutorials directory.
	The names of the tutorials correspond to projects in the /examples directory.
	
	To start read the install file and install SdlDotNet.dll and Tao.Sdl.dll.
	The best examples to start with are probably the Rectangles and PixelExample. They show the basics of how the Video, Surface and Event classes works.
	The ImageExample and Bounce Example show basic animation.
	The DelegateExample show how the ChannelFinished and Musicfinished events/delegates work.
	The BombRun, WeaponFire, SnowDemo show some more animation.
	The Gears demo shows how SDL.NET works with OpenGl.
	The MoviePlayer plays a short MPEG-1 file.
	The CDPlayer uses the CDRom subsystem and show how SDL.NET can use WinForms.
	The FontExample shows how Fonts are rendered in SDL.NET
	The GuiTest show some very basic widgets created by SDL.NET.
	The JoystickExample shows how to use a joystick. It is sluggish and still needs work.
	The PrimitiveExample draws primitives such as ellipses, triangles, bezier curves.
	The SimpleGame is more interesting from a code standpoint because it is strict Model-View-Controller design pattern. It is based on a Pygame tutorial.

TODO items:

Sijmen Mulder
- Things like Lock() and Unlock() should become a property 
- Multiple windows. Really. Then I will make a Managed DirectDraw implementation **WILL NOT BE DONE UNTIL SDL SUPPORTS IT**
