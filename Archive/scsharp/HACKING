Things are obviously in a tremendous state of flux.  There are
numerous pieces of code that are undergoing large amounts of changes,
and I periodically commit upwards of 20 files at a time with super
helpful commit messages like "sync".  Even with this current state of
affairs, I'd like people looking at the code, and if they feel moved
to contribute, so much the better.

Please contact me if you're interested in working in a specific area
so we can try to avoid stepping on each others' toes.

There are a couple of large, well contained tasks that could be done
largely independently of everything else.  I'll get to them
eventually, but they're all free for the taking.  I've ordered them in
terms of size/difficulty/coolness, from hardest to easiest (and
therefore coolest to least cool):

	1. Smacker player:

	   There are format docs up at:

	   http://wiki.multimedia.cx/index.php?title=Smacker

	   Clearly I don't understand the docs (and video codecs and
	   huffman trees in general) and couldn't get it to work.
	   This is of course assuming the spec itself is valid.  I
	   don't know that it is.

	   This task would result in all of the animated portraits,
	   the cut scenes, the animations in the main menu and race
	   selection screen (pretty much anything that's animated
	   that's not a unit/flingy) being visible.  It's not strictly
	   necessary for the game, but it's definitely got eyecandy
	   value.

	   A couple of possible options are available here:

           One would be porting/wrapping the ffmpeg[1] .smk codec so
           that we can use it.  I've done some preliminary work for
           this, enough to get cinematics working without audio.  the
           ffmpeg codec seems to have problems with the portrait and
           main menu smk's, though (possibly because they loop?) so it
           doesn't work for those yet.  I don't think this is a good
           long-term solution though, as maintaining a player that can
           deal with framerate/audio sync stuff seems like a pain in
           the ass.

           The second solution would be to take the gstreamer bindings
           being worked on for this year's Mono Project SoC and use
           them to build up a playback engine.  This would probably
           require some native coding as well.  There's a sdl sink in
           gstreamer now, but it appears to only target the YUV
           overlays, not RGB surfaces, which is what we'd need to
           integrate it into our painter.

           Given that scsharp *should* run on windows as well, and
           there's already a native .dll for decoding smacker video on
           windows, an interesting side project would be p/invoke into
           that library for doing playback when on the windows
           platform.  Anyone up for it?

	3. Figure out font rendering so that we can operate with either SC
	   or BW assets.  the best solution would enable us to render
	   fonts from the data contained in the
	   Stardat.mpq/Broodat.mpq archives, but I'd settle for a
	   solution that works with either CD's install.exe.

	4. The parallax (SPK) renderer used for the starfield
	   background on platform levels renders a 2x2 white rectangle
	   for each star.  apparently the .spk file contains bitmap
	   data for the stars.  Figure out the format and render the
	   stars correctly.

Email me if you're interested in any of the above tasks, and I'll get
some more info to you regarding where in the code changes will be
likely, and answer any other questions you might have.

welcome,
toshok